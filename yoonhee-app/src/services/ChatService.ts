import { generateClient } from 'aws-amplify/api';
import { fetchAuthSession } from 'aws-amplify/auth';
import { v4 as uuidv4 } from 'uuid';

// This will be generated by Amplify
// import { Message, Session } from '../API';

// Define interfaces for our data models
interface Message {
  id: string;
  content: string;
  isUser: boolean;
  createdAt: string;
  updatedAt: string;
  userId: string;
  sessionId: string;
}

interface Session {
  id: string;
  title: string;
  createdAt: string;
  updatedAt: string;
  userId: string;
}

// Generate a GraphQL client
const client = generateClient();

// GraphQL queries and mutations
const createSessionMutation = `
  mutation CreateSession($input: CreateSessionInput!) {
    createSession(input: $input) {
      id
      title
      createdAt
      updatedAt
      userId
    }
  }
`;

const createMessageMutation = `
  mutation CreateMessage($input: CreateMessageInput!) {
    createMessage(input: $input) {
      id
      content
      isUser
      createdAt
      updatedAt
      userId
      sessionId
    }
  }
`;

const getSessionQuery = `
  query GetSession($id: ID!) {
    getSession(id: $id) {
      id
      title
      createdAt
      updatedAt
      userId
    }
  }
`;

const listSessionsQuery = `
  query ListSessions($filter: ModelSessionFilterInput, $limit: Int, $nextToken: String) {
    listSessions(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        title
        createdAt
        updatedAt
        userId
      }
      nextToken
    }
  }
`;

const getMessagesForSessionQuery = `
  query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {
    listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        content
        isUser
        createdAt
        updatedAt
        userId
        sessionId
      }
      nextToken
    }
  }
`;

// ChatService class
export class ChatService {
  static async createSession(title: string): Promise<Session> {
    try {
      const session = await fetchAuthSession();
      const userId = session.tokens?.idToken?.payload.sub || 'guest';

      const result = await client.graphql({
        query: createSessionMutation,
        variables: {
          input: {
            id: uuidv4(),
            title,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            userId,
          }
        }
      });

      return result.data.createSession;
    } catch (error) {
      console.error('Error creating session:', error);
      throw error;
    }
  }

  static async createMessage(content: string, sessionId: string, isUser: boolean): Promise<Message> {
    try {
      const session = await fetchAuthSession();
      const userId = session.tokens?.idToken?.payload.sub || 'guest';

      const result = await client.graphql({
        query: createMessageMutation,
        variables: {
          input: {
            id: uuidv4(),
            content,
            isUser,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            userId,
            sessionId,
          }
        }
      });

      return result.data.createMessage;
    } catch (error) {
      console.error('Error creating message:', error);
      throw error;
    }
  }

  static async getSession(sessionId: string): Promise<Session> {
    try {
      const result = await client.graphql({
        query: getSessionQuery,
        variables: { id: sessionId }
      });

      return result.data.getSession;
    } catch (error) {
      console.error('Error getting session:', error);
      throw error;
    }
  }

  static async listSessions(): Promise<Session[]> {
    try {
      const session = await fetchAuthSession();
      const userId = session.tokens?.idToken?.payload.sub || 'guest';

      const result = await client.graphql({
        query: listSessionsQuery,
        variables: {
          filter: { userId: { eq: userId } },
          limit: 100
        }
      });

      return result.data.listSessions.items;
    } catch (error) {
      console.error('Error listing sessions:', error);
      throw error;
    }
  }

  static async getMessagesForSession(sessionId: string): Promise<Message[]> {
    try {
      const result = await client.graphql({
        query: getMessagesForSessionQuery,
        variables: {
          filter: { sessionId: { eq: sessionId } },
          limit: 1000
        }
      });

      return result.data.listMessages.items;
    } catch (error) {
      console.error('Error getting messages for session:', error);
      throw error;
    }
  }
} 